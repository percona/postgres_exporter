// Copyright 2024 The Prometheus Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package collector

import (
	"context"
	"database/sql"

	"github.com/blang/semver/v4"
	"github.com/go-kit/log"
	"github.com/prometheus/client_golang/prometheus"
)

const backendStatsSubsystem = "backend_stats"

func init() {
	registerCollector(backendStatsSubsystem, defaultDisabled, NewPGBackendStatsCollector)
}

type PGBackendStatsCollector struct {
	log log.Logger
}

func NewPGBackendStatsCollector(config collectorConfig) (Collector, error) {
	return &PGBackendStatsCollector{log: config.logger}, nil
}

var (
	// Backend I/O statistics metrics (PostgreSQL 18+)
	backendIOReads = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "io_reads_total"),
		"Number of reads by backend (PostgreSQL 18+)",
		[]string{"pid", "backend_type", "io_context", "io_object"},
		prometheus.Labels{},
	)
	backendIOWrites = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "io_writes_total"),
		"Number of writes by backend (PostgreSQL 18+)",
		[]string{"pid", "backend_type", "io_context", "io_object"},
		prometheus.Labels{},
	)
	backendIOExtends = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "io_extends_total"),
		"Number of extends by backend (PostgreSQL 18+)",
		[]string{"pid", "backend_type", "io_context", "io_object"},
		prometheus.Labels{},
	)
	backendIOReadBytes = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "io_read_bytes_total"),
		"Number of bytes read by backend (PostgreSQL 18+)",
		[]string{"pid", "backend_type", "io_context", "io_object"},
		prometheus.Labels{},
	)
	backendIOWriteBytes = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "io_write_bytes_total"),
		"Number of bytes written by backend (PostgreSQL 18+)",
		[]string{"pid", "backend_type", "io_context", "io_object"},
		prometheus.Labels{},
	)
	backendIOExtendBytes = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "io_extend_bytes_total"),
		"Number of bytes extended by backend (PostgreSQL 18+)",
		[]string{"pid", "backend_type", "io_context", "io_object"},
		prometheus.Labels{},
	)

	// Backend WAL statistics metrics (PostgreSQL 18+)
	backendWALRecords = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "wal_records_total"),
		"Number of WAL records generated by backend (PostgreSQL 18+)",
		[]string{"pid"},
		prometheus.Labels{},
	)
	backendWALBytes = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "wal_bytes_total"),
		"Number of WAL bytes generated by backend (PostgreSQL 18+)",
		[]string{"pid"},
		prometheus.Labels{},
	)
	backendWALBuffersUsed = prometheus.NewDesc(
		prometheus.BuildFQName(namespace, backendStatsSubsystem, "wal_buffers_used_total"),
		"Number of WAL buffers used by backend (PostgreSQL 18+)",
		[]string{"pid"},
		prometheus.Labels{},
	)

	// Backend I/O query for PostgreSQL 18+
	backendIOQuery = `
		SELECT 
			pid,
			backend_type,
			io_context,
			io_object,
			reads,
			writes,
			extends,
			read_bytes,
			write_bytes,
			extend_bytes
		FROM pg_stat_get_backend_io(NULL)
		WHERE pid IS NOT NULL
	`

	// Backend WAL query for PostgreSQL 18+
	backendWALQuery = `
		SELECT 
			pid,
			wal_records,
			wal_bytes,
			wal_buffers_used
		FROM pg_stat_get_backend_wal(NULL)
		WHERE pid IS NOT NULL
	`
)

func (c *PGBackendStatsCollector) Update(ctx context.Context, instance *instance, ch chan<- prometheus.Metric) error {
	// Backend statistics functions were introduced in PostgreSQL 18
	if instance.version.LT(semver.Version{Major: 18}) {
		return nil
	}

	db := instance.getDB()

	// Collect backend I/O statistics
	if err := c.collectBackendIO(ctx, db, ch); err != nil {
		return err
	}

	// Collect backend WAL statistics
	if err := c.collectBackendWAL(ctx, db, ch); err != nil {
		return err
	}

	return nil
}

func (c *PGBackendStatsCollector) collectBackendIO(ctx context.Context, db *sql.DB, ch chan<- prometheus.Metric) error {
	rows, err := db.QueryContext(ctx, backendIOQuery)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var pid sql.NullString
		var backendType, ioContext, ioObject sql.NullString
		var reads, writes, extends, readBytes, writeBytes, extendBytes sql.NullFloat64

		err := rows.Scan(
			&pid,
			&backendType,
			&ioContext,
			&ioObject,
			&reads,
			&writes,
			&extends,
			&readBytes,
			&writeBytes,
			&extendBytes,
		)
		if err != nil {
			return err
		}

		pidLabel := "unknown"
		if pid.Valid {
			pidLabel = pid.String
		}
		backendTypeLabel := "unknown"
		if backendType.Valid {
			backendTypeLabel = backendType.String
		}
		ioContextLabel := "unknown"
		if ioContext.Valid {
			ioContextLabel = ioContext.String
		}
		ioObjectLabel := "unknown"
		if ioObject.Valid {
			ioObjectLabel = ioObject.String
		}

		labels := []string{pidLabel, backendTypeLabel, ioContextLabel, ioObjectLabel}

		if reads.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendIOReads,
				prometheus.CounterValue,
				reads.Float64,
				labels...,
			)
		}

		if writes.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendIOWrites,
				prometheus.CounterValue,
				writes.Float64,
				labels...,
			)
		}

		if extends.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendIOExtends,
				prometheus.CounterValue,
				extends.Float64,
				labels...,
			)
		}

		if readBytes.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendIOReadBytes,
				prometheus.CounterValue,
				readBytes.Float64,
				labels...,
			)
		}

		if writeBytes.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendIOWriteBytes,
				prometheus.CounterValue,
				writeBytes.Float64,
				labels...,
			)
		}

		if extendBytes.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendIOExtendBytes,
				prometheus.CounterValue,
				extendBytes.Float64,
				labels...,
			)
		}
	}

	return nil
}

func (c *PGBackendStatsCollector) collectBackendWAL(ctx context.Context, db *sql.DB, ch chan<- prometheus.Metric) error {
	rows, err := db.QueryContext(ctx, backendWALQuery)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var pid sql.NullString
		var walRecords, walBytes, walBuffersUsed sql.NullFloat64

		err := rows.Scan(
			&pid,
			&walRecords,
			&walBytes,
			&walBuffersUsed,
		)
		if err != nil {
			return err
		}

		pidLabel := "unknown"
		if pid.Valid {
			pidLabel = pid.String
		}

		labels := []string{pidLabel}

		if walRecords.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendWALRecords,
				prometheus.CounterValue,
				walRecords.Float64,
				labels...,
			)
		}

		if walBytes.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendWALBytes,
				prometheus.CounterValue,
				walBytes.Float64,
				labels...,
			)
		}

		if walBuffersUsed.Valid {
			ch <- prometheus.MustNewConstMetric(
				backendWALBuffersUsed,
				prometheus.CounterValue,
				walBuffersUsed.Float64,
				labels...,
			)
		}
	}

	return nil
}
